from telegram.ext import Defaults
import logging
logging.basicConfig(level=logging.INFO)


import os
import time
import schedule
import threading

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

from signals import get_analysis, get_klines, compute_rsi, make_chart

BOT_TOKEN = os.getenv("BOT_TOKEN")

# Telegram logic
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Krypto Scout ü§ñ\n–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç —è —Å–∫–∞–Ω–∏—Ä—É—é —Ä—ã–Ω–æ–∫.\n–ö–æ–º–∞–Ω–¥—ã:\n/check ‚Äî —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑\n/portfolio ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤"
    )

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("BTC", callback_data='check_BTC'),
        InlineKeyboardButton("ETH", callback_data='check_ETH'),
        InlineKeyboardButton("SOL", callback_data='check_SOL')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    coin = query.data.replace("check_", "").upper()
    symbol = f"{coin}USDT"
    analysis = get_analysis(symbol)
    text = (
        f"üìä {symbol}\n\n"
        f"‚Ä¢ RSI: {analysis['rsi']}\n"
        f"‚Ä¢ –¶–µ–Ω–∞: ${analysis['price']}\n"
        f"‚Ä¢ –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ Bollinger: ${analysis['lower_band']}\n"
        f"‚Ä¢ –û–±—ä—ë–º: {analysis['volume_change']}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É\n"
    )
    df = get_klines(symbol)
    df['RSI'] = compute_rsi(df['close'])
    chart_path = make_chart(df, symbol)
    with open(chart_path, "rb") as chart:
        await query.message.reply_photo(photo=InputFile(chart), caption=text)

# Background auto-analysis logic
def run_auto_analysis():
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "MATICUSDT", "LINKUSDT", "ARBUSDT"]
    print("üîÅ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω")
    for symbol in symbols:
        try:
            result = get_analysis(symbol)
            print(f"[{symbol}] RSI: {result['rsi']}, –¶–µ–Ω–∞: {result['price']}, –û–±—ä—ë–º: {result['volume_change']}%")
            if result['rsi'] < 30 and result['volume_change'] > 20:
                print(f"üì¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: {symbol}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")

def schedule_thread():
    schedule.every(15).minutes.do(run_auto_analysis)
    print("‚è±Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–µ–Ω...")
    while True:
        schedule.run_pending()
        time.sleep(5)

# –ó–∞–ø—É—Å–∫ Telegram –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
if __name__ == "__main__":
    threading.Thread(target=schedule_thread, daemon=True).start()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RAILWAY_STATIC_URL')}{WEBHOOK_PATH}"

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.getenv('PORT', 8080)),
    webhook_path=WEBHOOK_PATH,
    webhook_url=WEBHOOK_URL
)


async def error_handler(update, context):
    logging.error(f"‚ùå Telegram error: {context.error}")
